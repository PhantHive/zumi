name: Music Player Server Deployment
on:
    push:
        tags:
            - 'v*'
jobs:
    setup:
        runs-on: self-hosted
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
            - name: Install dependencies
              run: npm install

    build:
        needs: setup
        runs-on: self-hosted
        steps:
            - name: Build server
              run: npm run build:server
            - name: Create uploads directory
              run: |
                  mkdir -p uploads/thumbnails
                  mkdir -p data

    docker-deploy:
        needs: build
        runs-on: self-hosted
        steps:
            - name: Check if tag exists
              id: check_tag
              run: |
                  TAG_NAME=$(git describe --tags --abbrev=0)
                  if [ -z "$TAG_NAME" ]; then
                   echo "No tags found. Skipping deployment."
                   exit 1
                  fi
                  echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: Dockerfile
                  push: true
                  tags: zaphial/music-server:${{ env.TAG_NAME }}
                  no-cache: true

            - name: Deploy to server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.PROD_SERVER_IP }}
                  username: ${{ secrets.PROD_SERVER_USER }}
                  key: ${{ secrets.PROD_SERVER_SSH }}
                  port: ${{ secrets.PROD_SERVER_PORT }}
                  script: |
                      # Stop and remove existing container if it exists
                      docker stop music-server || true
                      docker rm music-server || true

                      # Create directories if they don't exist and set permissions
                      mkdir -p /opt/music-server/uploads/thumbnails
                      mkdir -p /opt/music-server/data

                      # Run new container
                      docker run \
                      -d \
                      --name music-server \
                      -e PORT=${{ secrets.PROD_DOCKER_API_PORT }} \
                      -p ${{ secrets.PROD_DOCKER_API_PORT }}:${{ secrets.PROD_DOCKER_API_PORT }} \
                      -v /opt/music-server/uploads:/app/uploads \
                      -v /opt/music-server/data:/app/data \
                      zaphial/music-server:${{ env.TAG_NAME }}
